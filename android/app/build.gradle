def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_mobile_boilerplate"
        minSdkVersion localProperties.getProperty('flutter.minSdkVersion')
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }


    flavorDimensions "flavor"
    productFlavors {
        dev {
            dimension "flavor"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "DEV AMP Exclusives"
            manifestPlaceholders = [
                    'appAuthRedirectScheme': 'com.wmg.exclusives.dev',
                    exclusives_deep_link: 'wmg-exclusives'
            ]
//            buildConfigField("String", "NEWRELIC_TOKEN", newRelicToken_dev)
        }
        staging {
            dimension "flavor"
            applicationIdSuffix ".staging"
            resValue "string", "app_name", "STG AMP Exclusives"
            manifestPlaceholders = [
                    'appAuthRedirectScheme': 'com.wmg.exclusives.staging',
                    exclusives_deep_link: 'wmg-exclusives'
            ]
//            buildConfigField("String", "NEWRELIC_TOKEN", newRelicToken_stage)
        }
        preprod {
            dimension "flavor"
            applicationIdSuffix ".preprod"
            resValue "string", "app_name", "PP AMP Exclusives"
            manifestPlaceholders = [
                    'appAuthRedirectScheme': 'com.wmg.exclusives.preprod',
                    exclusives_deep_link: 'wmg-exclusives'
            ]
//            buildConfigField("String", "NEWRELIC_TOKEN", newRelicToken_preprod)
        }
        prod {
            dimension "flavor"
            resValue "string", "app_name", "AMP Exclusives"
            manifestPlaceholders = [
                    'appAuthRedirectScheme': 'com.wmg.exclusives',
                    exclusives_deep_link: 'wmg-exclusives'
            ]
//            buildConfigField("String", "NEWRELIC_TOKEN", newRelicToken_prod)
        }
    }
}



flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
